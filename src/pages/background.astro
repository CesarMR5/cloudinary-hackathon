---
import Layout from "@/layouts/Layout.astro";
import { CldUploadWidget } from "astro-cloudinary";
---

<Layout title="Spookify | Transformar Personas">
  <h2 class="text-2xl lg:text-3xl font-bold text-amber-700 text-center">
    Agrega un fondo unico y aterrador a tus imagenes
  </h2>
  <p class="text-lg lg:text-xl mt-4 text-orange-300 font-medium text-center">
    Monstruos, castillos embrujados, bosques encantados... Dale un toque unico y divertido a tus imagenes
  </p>

  <div class="flex flex-col justify-center items-center p-4 my-10">
    <p class="text-lg lg:text-xl mt-4 text-orange-300 font-medium text-center">Comienza seleccionando una imagen de tus archivos</p>
    <CldUploadWidget 
      id="upload-events"
      uploadPreset="spookify-hackathon"
      options={{
        sources: ["local"],
        multiple: false,
        maxFiles: 1,
        language: "es",
        text: {
          es: {
            or: "O",
            menu: {
              files: "Mis archivos"
            },
            local: {
              dd_title_single: "Selecciona o arrastra tu imagen aqui",
              browse: "Buscar"
            }
          }
        },
      }}
    >
      <button id="select" class="p-2 bg-amber-700 text-white font-bold capitalize rounded-lg my-10">
        Seleccionar
      </button>
    </CldUploadWidget>
    <div id="data" class="max-w-full w-full flex flex-col justify-center items-center mx-auto">
      <div id="id" class="flex justify-center w-auto gap-2"></div>
    </div>
  </div>
</Layout>

<script>
  import { getCldImageUrl, } from "astro-cloudinary/helpers";
  import { backgroundTopics } from "@/utils/consts"

  const widget = document.querySelector('#upload-events');
  const divData = document.querySelector('#data') as HTMLDivElement
  const divButtons = document.querySelector('#id') as HTMLDivElement
  const selectButton = document.querySelector('#select') as HTMLButtonElement

  const updateHTML = (imageUrl: string, imageId = '') => {
    const a = document.createElement('a') as HTMLAnchorElement
    const image = document.createElement('img') as HTMLImageElement
    let transformedImageUrl: string

    selectButton.disabled = true
    if (selectButton.disabled) selectButton.classList.add('disabled:bg-slate-500')

    image.src = imageUrl
    image.alt = "Imagen"
    image.classList.add('w-full', 'h-full', 'md:w-3/4', 'md:h-3/4', 'rounded-xl')

    backgroundTopics.forEach(topic => {
      const button = document.createElement('button') as HTMLButtonElement;
      button.classList.add('p-2', 'bg-amber-700', 'text-white', 'font-bold', 'capitalize', 'rounded-lg', 'my-10')
      button.innerText = topic.title

      button.addEventListener('click', () => {
        transformedImageUrl = getCldImageUrl({
          src: imageId,
          replaceBackground: topic.aiPrompt,
        })
        console.log(transformedImageUrl)

        image.src = transformedImageUrl
        image.alt = "Imagen transformada"
        a.href = transformedImageUrl
        a.text = "Descargar imagen"
        a.target = 'blank'
      })

      divButtons.appendChild(button)
    })

    divData.appendChild(image)
    divData.appendChild(a)
  }

  if ( widget ) {
    widget.addEventListener('clduploadwidget:success', ((e: CustomEvent<{ info: {public_id: string} } >) => {
      const imageId: string = e.detail.info.public_id;
      const imageUrl: string = getCldImageUrl({src: imageId})

      if (imageUrl) updateHTML(imageUrl, imageId)
    }) as EventListener);
  }
</script>